{"version":3,"file":"ebnf.js","sources":["../src/ebnf/grammar.ts","../src/ebnf/optimize.ts","../src/ebnf/generate.ts","../src/ebnf/transform.ts"],"sourcesContent":["import { Parser, string, lazy, all, any, regex } from \"../parse\";\n\nexport type Expression =\n    | Literal\n    | Nonterminal\n    | Group\n    | Regex\n    | Optional\n    | Minus\n    | Many\n    | Many1\n    | Skip\n    | Next\n    | Concatenation\n    | Alteration\n    | Epsilon\n    | OptionalWhitespace;\n\ninterface BaseExpression<T, V = string> {\n    type: T;\n    value: V;\n    comment?: string[];\n}\n\nexport type Nonterminal = BaseExpression<\"nonterminal\">;\n\nexport type Literal = BaseExpression<\"literal\">;\nexport type Regex = BaseExpression<\"regex\", RegExp>;\nexport type Epsilon = BaseExpression<\"epsilon\">;\n\nexport type Group = BaseExpression<\"group\", Expression>;\nexport type ManyGroup = BaseExpression<\"many\", Expression>;\nexport type OptionalGroup = BaseExpression<\"optional\", Expression>;\n\nexport type Optional = BaseExpression<\"optional\", Expression>;\nexport type OptionalWhitespace = BaseExpression<\"optionalWhitespace\", undefined>;\n\nexport type Minus = BaseExpression<\"minus\", [Expression, Expression]>;\n\nexport type Many = BaseExpression<\"many\", Expression>;\nexport type Many1 = BaseExpression<\"many1\", Expression>;\nexport type Skip = BaseExpression<\"skip\", [Expression, Expression]>;\nexport type Next = BaseExpression<\"next\", [Expression, Expression]>;\n\nexport type Concatenation = BaseExpression<\"concatenation\", Expression[]>;\nexport type Alteration = BaseExpression<\"alternation\", Expression[]>;\n\nexport type ProductionRule = {\n    expression: Expression;\n    name: string;\n    comment: {\n        above?: string[];\n        below?: string[];\n    };\n};\n\nexport type AST = Map<string, ProductionRule>;\nexport type Nonterminals = { [key: string]: Parser<any> };\n\nexport class EBNFGrammar {\n    identifier() {\n        return regex(/[_a-zA-Z][_a-zA-Z0-9]*/).trim();\n    }\n\n    literal() {\n        return any(\n            regex(/[^\"]+/).wrap(string('\"'), string('\"')),\n            regex(/[^']+/).wrap(string(\"'\"), string(\"'\"))\n        ).map((value) => {\n            return {\n                type: \"literal\",\n                value,\n            } as Literal;\n        });\n    }\n\n    epsilon() {\n        return any(string(\"epsilon\"), string(\"Îµ\"))\n            .trim()\n            .map((value) => {\n                return {\n                    type: \"epsilon\",\n                    value: undefined,\n                } as Epsilon;\n            });\n    }\n\n    nonterminal() {\n        return this.identifier().map((value) => {\n            return {\n                type: \"nonterminal\",\n                value,\n            } as Nonterminal;\n        });\n    }\n\n    @lazy\n    group() {\n        return this.expression()\n            .trim()\n            .wrap(string(\"(\"), string(\")\"))\n            .map((value) => {\n                return {\n                    type: \"group\",\n                    value,\n                } as Group;\n            });\n    }\n\n    @lazy\n    regex() {\n        return regex(/[^\\/]*/)\n            .wrap(string(\"/\"), string(\"/\"))\n            .map((value) => {\n                return {\n                    type: \"regex\",\n                    value: new RegExp(value),\n                } as Regex;\n            });\n    }\n\n    optional() {\n        return this.term()\n            .skip(string(\"?\").trim())\n            .map((value) => {\n                return {\n                    type: \"optional\",\n                    value,\n                } as Optional;\n            });\n    }\n\n    @lazy\n    optionalGroup() {\n        return this.expression()\n            .trim()\n            .wrap(string(\"[\"), string(\"]\"))\n            .map((value) => {\n                return {\n                    type: \"optional\",\n                    value,\n                } as Optional;\n            });\n    }\n\n    optionalWhitespace() {\n        return this.term()\n            .skip(string(\"?w\").trim())\n            .map((value) => {\n                return {\n                    type: \"optionalWhitespace\",\n                    value,\n                } as OptionalWhitespace;\n            });\n    }\n\n    minus() {\n        return all(this.term().skip(string(\"-\").trim()), this.term()).map(\n            ([left, right]) => {\n                return {\n                    type: \"minus\",\n                    value: [left, right],\n                } as Minus;\n            }\n        );\n    }\n\n    @lazy\n    manyGroup() {\n        return this.expression()\n            .trim()\n            .wrap(string(\"{\"), string(\"}\"))\n            .map((value) => {\n                return {\n                    type: \"many\",\n                    value,\n                } as Many;\n            });\n    }\n\n    many() {\n        return this.term()\n            .skip(string(\"*\").trim())\n            .map((value) => {\n                return {\n                    type: \"many\",\n                    value,\n                } as Many;\n            });\n    }\n\n    many1() {\n        return this.term()\n            .skip(string(\"+\").trim())\n            .map((value) => {\n                return {\n                    type: \"many1\",\n                    value,\n                } as Many1;\n            });\n    }\n\n    @lazy\n    next() {\n        return all(\n            this.factor().skip(string(\">>\").trim()),\n            any(this.skip(), this.factor())\n        ).map(([left, right]) => {\n            return {\n                type: \"next\",\n                value: [left, right],\n            } as Next;\n        });\n    }\n\n    @lazy\n    skip() {\n        return all(\n            any(this.next(), this.factor()).skip(string(\"<<\").trim()),\n            this.factor()\n        ).map(([left, right]) => {\n            return {\n                type: \"skip\",\n                value: [left, right],\n            } as Skip;\n        });\n    }\n\n    concatenation() {\n        return any(this.skip(), this.next(), this.factor())\n            .sepBy(string(\",\").trim(), 1)\n            .map((value) => {\n                return {\n                    type: \"concatenation\",\n                    value,\n                } as Concatenation;\n            });\n    }\n\n    alternation() {\n        return any(this.concatenation(), this.skip(), this.next(), this.factor())\n            .sepBy(string(\"|\").trim(), 1)\n            .map((value) => {\n                return {\n                    type: \"alternation\",\n                    value,\n                } as Alteration;\n            });\n    }\n\n    bigComment() {\n        return regex(/\\/\\*[^]*?\\*\\//).trim();\n    }\n\n    comment() {\n        return regex(/\\/\\/.*/)\n            .trim()\n            .or(this.bigComment());\n    }\n\n    term() {\n        return any(\n            this.epsilon(),\n            this.literal(),\n            this.nonterminal(),\n            this.regex(),\n            this.group(),\n            this.optionalGroup(),\n            this.manyGroup()\n        )\n            .then(this.bigComment().opt())\n            .map(([left, comment]) => {\n                left.comment = comment;\n                return left as unknown as Expression;\n            }) as Parser<Expression>;\n    }\n\n    factor() {\n        return any(\n            this.optionalWhitespace(),\n            this.optional(),\n            this.many(),\n            this.many1(),\n            this.minus(),\n            this.term()\n        ) as Parser<Expression>;\n    }\n\n    expression() {\n        return any(\n            this.alternation(),\n            this.concatenation(),\n            this.skip(),\n            this.next(),\n            this.factor()\n        ) as Parser<Expression>;\n    }\n\n    productionRule() {\n        return all(\n            this.identifier().skip(string(\"=\").trim()),\n            this.expression().skip(any(string(\";\").trim(), string(\".\").trim()))\n        ).map(([name, expression]) => {\n            return { name, expression } as ProductionRule;\n        });\n    }\n\n    grammar() {\n        return all(this.comment().many(), this.productionRule(), this.comment().many())\n            .map(([above, rule, below]) => {\n                rule.comment = {\n                    above,\n                    below,\n                };\n                return rule;\n            })\n            .many(1);\n    }\n}\n","import {\n    Alteration,\n    AST,\n    Concatenation,\n    Epsilon,\n    Expression,\n    Nonterminal,\n    ProductionRule,\n} from \"./grammar\";\n\nexport function topologicalSort(ast: AST) {\n    const visited = new Set<string>();\n    const order: ProductionRule[] = [];\n\n    function visit(node: string, stack: Set<string>) {\n        if (stack.has(node) || visited.has(node)) {\n            return;\n        }\n\n        stack.add(node);\n        const productionRule = ast.get(node)!;\n\n        if (!productionRule) {\n            return;\n        }\n\n        const expr = productionRule.expression;\n\n        if (expr.type === \"nonterminal\") {\n            visit(expr.value, stack);\n        } else if (expr.value instanceof Array) {\n            for (const child of expr.value) {\n                if (child.type === \"nonterminal\") {\n                    visit(child.value, stack);\n                }\n            }\n        }\n\n        visited.add(node);\n        stack.delete(node);\n\n        order.unshift(ast.get(node) as ProductionRule);\n    }\n\n    for (const [name] of ast) {\n        visit(name, new Set<string>());\n    }\n\n    const newAST = new Map() as AST;\n    for (const rule of order) {\n        newAST.set(rule.name, rule);\n    }\n\n    return newAST;\n}\n\nexport const findCommonPrefix = (\n    e1: Expression,\n    e2: Expression\n): [Expression | null, Expression, Expression] => {\n    if (!e1?.type || !e2?.type || e1.type !== e2.type) {\n        return undefined;\n    }\n\n    switch (e1.type) {\n        case \"literal\":\n        case \"nonterminal\": {\n            if (e1.value !== e2.value) {\n                return undefined;\n            } else {\n                return [e1, { type: \"epsilon\" }, { type: \"epsilon\" }] as [\n                    Expression,\n                    Expression,\n                    Expression\n                ];\n            }\n        }\n\n        case \"group\":\n        case \"optional\":\n        case \"many\":\n        case \"many1\": {\n            const common = findCommonPrefix(e1.value, e2.value as Expression);\n            if (!common) {\n                return undefined;\n            } else {\n                return [\n                    {\n                        type: e1.type,\n                        value: common[0],\n                    },\n                    {\n                        type: e1.type,\n                        value: common[1],\n                    },\n                    {\n                        type: e1.type,\n                        value: common[2],\n                    },\n                ] as [Expression, Expression, Expression];\n            }\n        }\n\n        case \"concatenation\": {\n            const commons = e1.value.map((_, i) =>\n                findCommonPrefix(e1.value[i], e2.value[i])\n            );\n            if (commons.some((x) => x === undefined)) {\n                return undefined;\n            }\n\n            const prefixes = commons.map((x) => x[0]);\n            const e1s = commons.map((x) => x[1]);\n            const e2s = commons.map((x) => x[2]);\n\n            const startIx = prefixes.lastIndexOf(null);\n            if (startIx === prefixes.length - 1) {\n                return undefined;\n            }\n\n            const prefix = prefixes.slice(startIx + 1);\n            return [\n                {\n                    type: \"concatenation\",\n                    value: prefix,\n                },\n                {\n                    type: \"concatenation\",\n                    value: e1s,\n                },\n                {\n                    type: \"concatenation\",\n                    value: e2s,\n                },\n            ];\n        }\n\n        case \"alternation\":\n            // TODO! This is not correct\n            for (const e of e1.value) {\n                const common = findCommonPrefix(e, e2);\n                if (common) {\n                    return common;\n                }\n            }\n            for (const e of e2.value as Expression[]) {\n                const common = findCommonPrefix(e1, e);\n                if (common) {\n                    return common;\n                }\n            }\n            return undefined;\n    }\n    return undefined;\n};\n\nexport const comparePrefix = (prefix: Expression, expr: Expression): boolean => {\n    if (prefix.type !== expr.type) {\n        return false;\n    }\n    switch (prefix.type) {\n        case \"literal\":\n        case \"nonterminal\":\n            return prefix.value === expr.value;\n        case \"group\":\n        case \"optional\":\n        case \"many\":\n        case \"many1\":\n            return comparePrefix(prefix.value, expr.value as Expression);\n        case \"minus\":\n        case \"skip\":\n        case \"next\":\n            return (\n                comparePrefix(prefix.value[0], expr.value[0]) &&\n                comparePrefix(prefix.value[1], expr.value[1])\n            );\n        case \"concatenation\":\n            return prefix.value.every((e, i) => comparePrefix(e, expr.value[i]));\n        case \"alternation\":\n            return prefix.value.some((e, i) => comparePrefix(e, expr.value[i]));\n        case \"epsilon\":\n            return true;\n    }\n};\n\nexport function rewriteTreeLeftRecursion(name: string, expr: Alteration) {\n    const prefixMap = new Map<Expression, Expression[]>();\n    let commonPrefix: Expression | null = null;\n\n    for (let i = 0; i < expr.value.length - 1; i++) {\n        const e1 = expr.value[i];\n        const e2 = expr.value[i + 1];\n\n        const common = findCommonPrefix(e1, e2);\n        if (common) {\n            const [prefix, te1, te2] = common;\n\n            if (commonPrefix !== null && comparePrefix(prefix, commonPrefix)) {\n                prefixMap.get(commonPrefix)!.push(te2);\n            } else {\n                prefixMap.set(prefix, [te1, te2]);\n                commonPrefix = prefix;\n            }\n            if (i === expr.value.length - 2) {\n                expr.value.shift();\n            }\n            expr.value.shift();\n            i -= 1;\n        }\n    }\n\n    for (const [prefix, expressions] of prefixMap) {\n        const alternation = {\n            type: \"alternation\",\n            value: expressions,\n        } as Alteration;\n        const newExpr = {\n            type: \"concatenation\",\n            value: [\n                {\n                    type: \"group\",\n                    value: alternation,\n                },\n                {\n                    type: \"group\",\n                    value: prefix,\n                },\n            ],\n        } as Concatenation;\n\n        expr.value.push(newExpr);\n    }\n}\n\nconst removeDirectLeftRecursionProduction = (\n    name: string,\n    expr: Alteration,\n    tailName: string\n) => {\n    const head = [];\n    const tail = [];\n\n    const APrime = {\n        type: \"nonterminal\",\n        value: tailName,\n    } as Nonterminal;\n\n    for (let i = 0; i < expr.value.length; i++) {\n        const e = expr.value[i];\n\n        if (e.type === \"concatenation\" && e.value[0].value === name) {\n            tail.push({\n                type: \"concatenation\",\n                value: [...e.value.slice(1), APrime],\n            });\n        } else {\n            head.push({\n                type: \"concatenation\",\n                value: [e, APrime],\n            });\n        }\n    }\n\n    // No direct left recursion\n    if (tail.length === 0) {\n        return [undefined, undefined];\n    }\n\n    tail.push({\n        type: \"epsilon\",\n    } as Epsilon);\n\n    return [\n        {\n            type: \"alternation\",\n            value: head,\n        } as Alteration,\n        {\n            type: \"alternation\",\n            value: tail,\n        } as Alteration,\n    ] as const;\n};\n\nexport function removeDirectLeftRecursion(ast: AST) {\n    const newNodes = new Map() as AST;\n\n    let uniqueIndex = 0;\n    for (const [name, productionRule] of ast) {\n        const { expression } = productionRule;\n\n        if (expression.type === \"alternation\") {\n            const tailName = `${name}_${uniqueIndex++}`;\n\n            const [head, tail] = removeDirectLeftRecursionProduction(\n                name,\n                expression,\n                tailName\n            );\n\n            if (head) {\n                newNodes.set(tailName, {\n                    name: tailName,\n                    expression: tail,\n                } as ProductionRule);\n                newNodes.set(name, {\n                    name,\n                    expression: head,\n                    comment: productionRule.comment,\n                } as ProductionRule);\n            }\n        }\n    }\n\n    if (newNodes.size === 0) {\n        return ast;\n    }\n    for (const [name, productionRule] of newNodes) {\n        ast.set(name, productionRule);\n    }\n\n    for (const [name, productionRule] of ast) {\n        const { expression } = productionRule;\n        if (expression.type === \"alternation\") {\n            rewriteTreeLeftRecursion(name, expression);\n        }\n    }\n}\n\nexport function removeIndirectLeftRecursion(ast: AST) {\n    let i = 0;\n\n    let uniqueIndex = 0;\n    const betas = new Map<string, Expression>();\n\n    const recurse = (name: string, expr: Expression) => {\n        if (expr.type === \"concatenation\") {\n            if (expr.value[0].type === \"nonterminal\" && expr.value[0].value === name) {\n                const beta = {\n                    type: \"concatenation\",\n                    value: expr.value.slice(1, expr.value.length),\n                } as Concatenation;\n                const aj = expr.value.shift();\n                const tailName = `${name}_${uniqueIndex++}`;\n            }\n        }\n    };\n\n    for (const [name, expression] of ast) {\n        recurse(name, expression);\n\n        i += 1;\n    }\n}\n\nexport function removeAllLeftRecursion(ast: AST) {\n    const newAST = topologicalSort(ast);\n\n    // removeIndirectLeftRecursion(newAST);\n    removeDirectLeftRecursion(newAST);\n\n    return newAST;\n}\n","import { Parser, all, any, eof, regex, string } from \"../parse\";\nimport { Expression, Nonterminals, AST, EBNFGrammar, ProductionRule } from \"./grammar\";\nimport { removeAllLeftRecursion } from \"./optimize\";\n\nexport function generateASTFromEBNF(input: string) {\n    const parser = new EBNFGrammar().grammar().trim();\n    const parsed = parser.parse(input);\n\n    if (!parsed) {\n        throw new Error(\"Failed to parse EBNF grammar\");\n    }\n\n    return parsed.reduce((acc, productionRule, ix) => {\n        acc.set(productionRule.name, productionRule);\n        return acc;\n    }, new Map<string, ProductionRule>()) as AST;\n}\n\nexport function generateParserFromAST(ast: AST) {\n    function generateParser(name: string, expr: Expression): Parser<any> {\n        switch (expr.type) {\n            case \"literal\":\n                return string(expr.value);\n            case \"nonterminal\":\n                const l = Parser.lazy(() => {\n                    return nonterminals[expr.value];\n                });\n                l.context.name = expr.value as any;\n                return l;\n\n            case \"epsilon\":\n                return eof().opt();\n\n            case \"group\":\n                return generateParser(name, expr.value);\n\n            case \"regex\":\n                return regex(expr.value);\n\n            case \"optionalWhitespace\":\n                return generateParser(name, expr.value).trim();\n\n            case \"optional\":\n                return generateParser(name, expr.value).opt();\n            case \"many\":\n                return generateParser(name, expr.value).many();\n            case \"many1\":\n                return generateParser(name, expr.value).many(1);\n            case \"skip\":\n                return generateParser(name, expr.value[0]).skip(\n                    generateParser(name, expr.value[1])\n                );\n            case \"next\":\n                return generateParser(name, expr.value[0]).next(\n                    generateParser(name, expr.value[1])\n                );\n            case \"minus\":\n                return generateParser(name, expr.value[0]).not(\n                    generateParser(name, expr.value[1])\n                );\n            case \"concatenation\": {\n                const parsers = expr.value.map((x) => generateParser(name, x));\n                if (parsers.at(-1)?.context?.name === \"eof\") {\n                    parsers.pop();\n                }\n                return all(...parsers);\n            }\n            case \"alternation\": {\n                return any(...expr.value.map((x) => generateParser(name, x)));\n            }\n        }\n    }\n\n    const nonterminals: Nonterminals = {};\n\n    for (const [name, productionRule] of ast.entries()) {\n        nonterminals[name] = generateParser(name, productionRule.expression);\n    }\n    return nonterminals;\n}\n\nexport function generateParserFromEBNF(input: string, optimizeGraph: boolean = false) {\n    let ast = generateASTFromEBNF(input);\n\n    if (optimizeGraph) {\n        ast = removeAllLeftRecursion(ast);\n    }\n    const nonterminals = generateParserFromAST(ast);\n    return [nonterminals, ast] as const;\n}\n","import { Expression, AST } from \"./grammar\";\n\nimport { generateParserFromEBNF } from \"./generate\";\n\nfunction breakLineOnSeparator(input: string, separator: string): string {\n    const lines = input.split(separator);\n\n    if (lines.length === 1) {\n        return input;\n    }\n\n    input = lines\n        .map((line, i) => {\n            if (i === lines.length - 1) {\n                return separator + line;\n            } else if (i === 0) {\n                return line;\n            }\n\n            const groups = line.split(\",\");\n\n            if (groups.length > 1) {\n                return `\\n\\t${separator} ` + line;\n            } else {\n                return separator + line;\n            }\n        })\n        .join(\"\");\n\n    const maxLineLength = 66;\n\n    if (input.length > maxLineLength) {\n        let di = maxLineLength;\n\n        for (let i = 0; i < input.length; i += di) {\n            const nearestSepIx = i === 0 ? maxLineLength : i + di;\n            const nearestSep = input.indexOf(separator, nearestSepIx);\n\n            if (nearestSep === -1) {\n                break;\n            }\n            input =\n                input.slice(0, nearestSep) +\n                `\\n\\t${separator}` +\n                input.slice(nearestSep + 1);\n        }\n    }\n\n    return input;\n}\n\nconst nonterminalsToTrim = [\n    \"symbol\",\n    \"identifier\",\n    \"terminal\",\n    \"pipe\",\n    \"comma\",\n    \"plus\",\n    \"minus\",\n    \"star\",\n    \"div\",\n    \"question\",\n    \"eof\",\n    \"optional_whitespace\",\n    \"regex\",\n    \"rhs\",\n    \"rule\",\n    \"grammar\",\n];\n\nexport const EBNFParser = (grammar: string) => {\n    const [nonterminals, ast] = generateParserFromEBNF(grammar);\n\n    for (const name of nonterminalsToTrim) {\n        nonterminals[name] = nonterminals[name].trim();\n    }\n\n    nonterminals.symbol = nonterminals.symbol;\n\n    nonterminals.identifier = nonterminals.identifier.map((v) => {\n        return v.flat().join(\"\");\n    });\n\n    nonterminals.terminal = nonterminals.terminal.map((v) => {\n        return v.flat().join(\"\");\n    });\n\n    nonterminals.regex = nonterminals.regex.map((v) => {\n        const s = v.flat().join(\"\");\n        return s;\n    });\n\n    nonterminals.rhs = nonterminals.rhs.map((v) => {\n        const a = v instanceof Array ? v.flat(Infinity) : v;\n        const s = a.join(\" \");\n        return breakLineOnSeparator(s, \"|\");\n    });\n\n    nonterminals.rule = nonterminals.rule.map((v) => {\n        const s = v.flat().join(\" \");\n        return s;\n    });\n\n    return nonterminals.grammar.map((rules) => {\n        let lastIx = 0;\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i];\n\n            if (rule.length > 80) {\n                rules[i] = rule + \"\\n\";\n                if (i > 0 && lastIx !== i - 1) {\n                    rules[i - 1] = rules[i - 1] + \"\\n\";\n                }\n                lastIx = i;\n            } else if (i - lastIx > 2) {\n                rules[i] = rule + \"\\n\";\n                lastIx = i;\n            }\n        }\n        return rules.join(\"\\n\");\n    });\n\n    // debugging(nonterminals);\n};\n\nfunction escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\ntype TextMateProductionRule = {\n    name: string;\n    match: string;\n};\n\ntype TextMateLanguage = {\n    name: string;\n    scopeName: string;\n    fileTypes: string[];\n    patterns: TextMateProductionRule[];\n};\n\nfunction transformEBNFASTToTextMateRegExp(expression: Expression): string {\n    switch (expression.type) {\n        case \"literal\":\n            return escapeRegExp(expression.value);\n        case \"nonterminal\":\n            return `($${expression.value})`;\n        case \"epsilon\":\n            return \"\";\n        case \"group\":\n            return `(${transformEBNFASTToTextMateRegExp(expression.value)})`;\n        case \"regex\":\n            return expression.value.source;\n        case \"optional\":\n            return `(${transformEBNFASTToTextMateRegExp(expression.value)})?`;\n        case \"minus\":\n            return `${transformEBNFASTToTextMateRegExp(\n                expression.value[0]\n            )}(?!${transformEBNFASTToTextMateRegExp(expression.value[1])})`;\n        case \"many\":\n            return `(${transformEBNFASTToTextMateRegExp(expression.value)})*`;\n        case \"many1\":\n            return `(${transformEBNFASTToTextMateRegExp(expression.value)})+`;\n        case \"skip\":\n            return `${transformEBNFASTToTextMateRegExp(\n                expression.value[0]\n            )}(?:${transformEBNFASTToTextMateRegExp(expression.value[1])})?`;\n        case \"next\":\n            return `${transformEBNFASTToTextMateRegExp(\n                expression.value[0]\n            )}(?=${transformEBNFASTToTextMateRegExp(expression.value[1])})`;\n        case \"concatenation\":\n            return expression.value.map(transformEBNFASTToTextMateRegExp).join(\"\");\n        case \"alternation\":\n            return expression.value\n                .map((expr) => `(${transformEBNFASTToTextMateRegExp(expr)})`)\n                .join(\"|\");\n    }\n}\n\nexport function transformEBNFASTToTextMateLanguage(ast: AST): TextMateLanguage {\n    const rules: TextMateProductionRule[] = [];\n\n    // Traverse the EBNF AST and transform each production rule into a TextMate production rule\n    for (const [name, expr] of ast) {\n        rules.push({\n            name,\n            match: transformEBNFASTToTextMateRegExp(expr),\n        });\n    }\n    // Create and return the TextMate language object\n    return {\n        name: \"EEBNF\",\n        scopeName: \"source.eebnf\",\n        fileTypes: [\"eebnf\"],\n        patterns: rules,\n    };\n}\n"],"names":["EBNFGrammar","regex","any","string","value","all","left","right","comment","name","expression","above","rule","below","__decorateClass","lazy","topologicalSort","ast","visited","order","visit","node","stack","productionRule","expr","child","newAST","findCommonPrefix","e1","e2","common","commons","_","i","x","prefixes","e1s","e2s","startIx","e","comparePrefix","prefix","rewriteTreeLeftRecursion","prefixMap","commonPrefix","te1","te2","expressions","newExpr","removeDirectLeftRecursionProduction","tailName","head","tail","APrime","removeDirectLeftRecursion","newNodes","uniqueIndex","removeIndirectLeftRecursion","recurse","removeAllLeftRecursion","generateASTFromEBNF","input","parsed","acc","ix","generateParserFromAST","generateParser","Parser","nonterminals","eof","parsers","_b","_a","generateParserFromEBNF","optimizeGraph","breakLineOnSeparator","separator","lines","line","maxLineLength","di","nearestSepIx","nearestSep","nonterminalsToTrim","EBNFParser","grammar","v","s","rules","lastIx","escapeRegExp","transformEBNFASTToTextMateRegExp","transformEBNFASTToTextMateLanguage"],"mappings":"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"}