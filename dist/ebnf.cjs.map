{"version":3,"file":"ebnf.cjs","sources":["../src/ebnf/grammar.ts","../src/ebnf/optimize.ts","../src/ebnf/generate.ts"],"sourcesContent":["import { Parser, string, lazy, all, any, regex } from \"../parse\";\nimport { parserDebug } from \"../parse/debug\";\n\nexport type Expression =\n    | Literal\n    | Nonterminal\n    | Group\n    | Regex\n    | Optional\n    | Minus\n    | Many\n    | Many1\n    | Skip\n    | Next\n    | Concatenation\n    | Alteration\n    | Epsilon\n    | OptionalWhitespace;\n\ninterface BaseExpression<T, V = string> {\n    type: T;\n    value: V;\n    comment?: {\n        left: string[];\n        right: string[];\n    };\n}\n\nexport type Nonterminal = BaseExpression<\"nonterminal\">;\n\nexport type Literal = BaseExpression<\"literal\">;\nexport type Regex = BaseExpression<\"regex\", RegExp>;\nexport type Epsilon = BaseExpression<\"epsilon\">;\n\nexport type Group = BaseExpression<\"group\", Expression>;\nexport type ManyGroup = BaseExpression<\"many\", Expression>;\nexport type OptionalGroup = BaseExpression<\"optional\", Expression>;\n\nexport type Optional = BaseExpression<\"optional\", Expression>;\nexport type OptionalWhitespace = BaseExpression<\"optionalWhitespace\", undefined>;\n\nexport type Minus = BaseExpression<\"minus\", [Expression, Expression]>;\n\nexport type Many = BaseExpression<\"many\", Expression>;\nexport type Many1 = BaseExpression<\"many1\", Expression>;\nexport type Skip = BaseExpression<\"skip\", [Expression, Expression]>;\nexport type Next = BaseExpression<\"next\", [Expression, Expression]>;\n\nexport type Concatenation = BaseExpression<\"concatenation\", Expression[]>;\nexport type Alteration = BaseExpression<\"alternation\", Expression[]>;\n\nexport type ProductionRule = {\n    expression: Expression;\n    name: string;\n    comment: {\n        above: string[];\n        below: string[];\n    };\n};\n\nexport type AST = Map<string, ProductionRule>;\nexport type Nonterminals = { [key: string]: Parser<any> };\n\nconst operatorToType = {\n    \"|\": \"alternation\",\n    \",\": \"concatenation\",\n    \"-\": \"minus\",\n    \"<<\": \"skip\",\n    \">>\": \"next\",\n    \"*\": \"many\",\n    \"+\": \"many1\",\n    \"?\": \"optional\",\n    \"?w\": \"optionalWhitespace\",\n};\n\nconst reduceBinaryExpression = ([left, rightExpression]) => {\n    if (rightExpression.length === 0) {\n        return left;\n    }\n    return rightExpression.reduce((acc, [op, right]) => {\n        return {\n            type: operatorToType[op],\n            value: [acc, right],\n        };\n    }, left);\n};\n\nconst mapFactor = ([term, op]) => {\n    if (op === undefined) {\n        return term;\n    }\n    const type = operatorToType[op];\n    return {\n        type,\n        value: term,\n    } as Expression;\n};\n\ntype Options = {\n    debug: boolean;\n    comments: boolean;\n};\n\nconst defaultOptions = {\n    debug: false,\n    comments: true,\n} as Options;\n\nexport class EBNFGrammar {\n    options: Options;\n\n    constructor(options?: Partial<Options>) {\n        this.options = {\n            ...defaultOptions,\n            ...(options ?? {}),\n        };\n    }\n\n    identifier() {\n        return regex(/[_a-zA-Z][_a-zA-Z0-9]*/).trim();\n    }\n\n    literal() {\n        return this.trimBigComment(\n            any(\n                regex(/[^\"]+/).wrap(string('\"'), string('\"')),\n                regex(/[^']+/).wrap(string(\"'\"), string(\"'\"))\n            ).map((value) => {\n                return {\n                    type: \"literal\",\n                    value,\n                } as Literal;\n            })\n        );\n    }\n\n    epsilon() {\n        return any(string(\"epsilon\"), string(\"Îµ\"))\n            .trim()\n            .map((value) => {\n                return {\n                    type: \"epsilon\",\n                    value: undefined,\n                } as Epsilon;\n            });\n    }\n\n    nonterminal() {\n        return this.identifier().map((value) => {\n            return {\n                type: \"nonterminal\",\n                value,\n            } as Nonterminal;\n        });\n    }\n\n    @lazy\n    bigComment() {\n        return regex(/\\/\\*[^\\*]*\\*\\//).trim();\n    }\n\n    @lazy\n    comment() {\n        return regex(/\\/\\/.*/)\n            .or(this.bigComment())\n            .trim();\n    }\n\n    trimBigComment(e: Parser<any>) {\n        return e\n            .trim(this.bigComment().many(), false)\n            .map(([left, expression, right]) => {\n                expression.comment = {\n                    left,\n                    right,\n                };\n                return expression as unknown as Expression;\n            }) as Parser<Expression>;\n    }\n\n    @lazy\n    group() {\n        return this.rhs()\n            .trim()\n            .wrap(string(\"(\"), string(\")\"))\n            .map((value) => {\n                return {\n                    type: \"group\",\n                    value,\n                } as Group;\n            });\n    }\n\n    @lazy\n    regex() {\n        return regex(/[^\\/]*/)\n            .wrap(string(\"/\"), string(\"/\"))\n            .map((value) => {\n                return {\n                    type: \"regex\",\n                    value: new RegExp(value),\n                } as Regex;\n            });\n    }\n\n    @lazy\n    optionalGroup() {\n        return this.rhs()\n            .trim()\n            .wrap(string(\"[\"), string(\"]\"))\n            .map((value) => {\n                return {\n                    type: \"optional\",\n                    value,\n                } as Optional;\n            });\n    }\n\n    @lazy\n    manyGroup() {\n        return this.rhs()\n            .trim()\n            .wrap(string(\"{\"), string(\"}\"))\n            .map((value) => {\n                return {\n                    type: \"many\",\n                    value,\n                } as Many;\n            });\n    }\n\n    @lazy\n    lhs() {\n        return this.identifier();\n    }\n\n    @lazy\n    term() {\n        return any(\n            this.epsilon(),\n            this.group(),\n            this.optionalGroup(),\n            this.manyGroup(),\n            this.nonterminal(),\n            this.literal(),\n            this.regex()\n        );\n    }\n\n    @lazy\n    factor() {\n        return this.trimBigComment(\n            all(\n                this.term(),\n                any(\n                    string(\"?w\").trim(),\n                    string(\"?\").trim(),\n                    string(\"*\").trim(),\n                    string(\"+\").trim()\n                ).opt()\n            ).map(mapFactor)\n        ) as Parser<Expression>;\n    }\n\n    @lazy\n    binaryFactor() {\n        return all(\n            this.factor(),\n            all(\n                any(string(\"<<\").trim(), string(\">>\").trim(), string(\"-\").trim()),\n                this.factor()\n            ).many()\n        ).map(reduceBinaryExpression);\n    }\n\n    @lazy\n    concatenation() {\n        return this.binaryFactor()\n            .sepBy(string(\",\").trim())\n            .map((value) => {\n                if (value.length === 1) {\n                    return value[0];\n                }\n\n                return {\n                    type: \"concatenation\",\n                    value,\n                } as Concatenation;\n            });\n    }\n\n    @lazy\n    alternation() {\n        return this.concatenation()\n            .sepBy(string(\"|\").trim())\n            .map((value) => {\n                if (value.length === 1) {\n                    return value[0];\n                }\n\n                return {\n                    type: \"alternation\",\n                    value,\n                } as Alteration;\n            });\n    }\n\n    @lazy\n    rhs() {\n        return this.alternation();\n    }\n\n    @lazy\n    productionRule() {\n        return all(\n            this.lhs(),\n            string(\"=\").trim(),\n            this.rhs(),\n            any(string(\";\"), string(\".\")).trim()\n        ).map(([name, , expression]) => {\n            return { name, expression } as ProductionRule;\n        });\n    }\n\n    @lazy\n    grammar() {\n        return this.productionRule()\n            .trim(this.comment().many(), false)\n            .map(([above, rule, below]) => {\n                rule.comment = {\n                    above,\n                    below,\n                };\n                return rule;\n            })\n            .many(1);\n    }\n}\n","import {\n    Alteration,\n    AST,\n    Concatenation,\n    Epsilon,\n    Expression,\n    Nonterminal,\n    ProductionRule,\n} from \"./grammar\";\n\nexport function topologicalSort(ast: AST) {\n    const visited = new Set<string>();\n    const order: ProductionRule[] = [];\n\n    function visit(node: string, stack: Set<string>) {\n        if (stack.has(node) || visited.has(node)) {\n            return;\n        }\n\n        stack.add(node);\n        const productionRule = ast.get(node)!;\n\n        if (!productionRule) {\n            return;\n        }\n\n        const expr = productionRule.expression;\n\n        if (expr.type === \"nonterminal\") {\n            visit(expr.value, stack);\n        } else if (expr.value instanceof Array) {\n            for (const child of expr.value) {\n                if (child.type === \"nonterminal\") {\n                    visit(child.value, stack);\n                }\n            }\n        }\n\n        visited.add(node);\n        stack.delete(node);\n\n        order.unshift(ast.get(node) as ProductionRule);\n    }\n\n    for (const [name] of ast) {\n        visit(name, new Set<string>());\n    }\n\n    const newAST = new Map() as AST;\n    for (const rule of order) {\n        newAST.set(rule.name, rule);\n    }\n\n    return newAST;\n}\n\nexport const findCommonPrefix = (\n    e1: Expression,\n    e2: Expression\n): [Expression | null, Expression, Expression] => {\n    if (!e1?.type || !e2?.type || e1.type !== e2.type) {\n        return undefined;\n    }\n\n    switch (e1.type) {\n        case \"literal\":\n        case \"nonterminal\": {\n            if (e1.value !== e2.value) {\n                return undefined;\n            } else {\n                return [e1, { type: \"epsilon\" }, { type: \"epsilon\" }] as [\n                    Expression,\n                    Expression,\n                    Expression\n                ];\n            }\n        }\n        case \"group\":\n        case \"optional\":\n        case \"optionalWhitespace\":\n        case \"many\":\n        case \"many1\": {\n            const common = findCommonPrefix(e1.value, e2.value as Expression);\n            if (!common) {\n                return undefined;\n            } else {\n                return [\n                    {\n                        type: e1.type,\n                        value: common[0],\n                    },\n                    {\n                        type: e1.type,\n                        value: common[1],\n                    },\n                    {\n                        type: e1.type,\n                        value: common[2],\n                    },\n                ] as [Expression, Expression, Expression];\n            }\n        }\n\n        case \"concatenation\": {\n            const commons = e1.value.map((_, i) =>\n                findCommonPrefix(e1.value[i], e2.value[i])\n            );\n            if (commons.some((x) => x === undefined)) {\n                return undefined;\n            }\n\n            const prefixes = commons.map((x) => x[0]);\n            const e1s = commons.map((x) => x[1]);\n            const e2s = commons.map((x) => x[2]);\n\n            const startIx = prefixes.lastIndexOf(null);\n            if (startIx === prefixes.length - 1) {\n                return undefined;\n            }\n            const prefix = prefixes.slice(startIx + 1);\n            return [\n                {\n                    type: \"concatenation\",\n                    value: prefix,\n                },\n                {\n                    type: \"concatenation\",\n                    value: e1s,\n                },\n                {\n                    type: \"concatenation\",\n                    value: e2s,\n                },\n            ];\n        }\n\n        case \"alternation\":\n            // TODO! This is not correct\n            for (const e of e1.value) {\n                const common = findCommonPrefix(e, e2);\n                if (common) {\n                    return common;\n                }\n            }\n            for (const e of e2.value as Expression[]) {\n                const common = findCommonPrefix(e1, e);\n                if (common) {\n                    return common;\n                }\n            }\n            return undefined;\n    }\n    return undefined;\n};\n\nexport const comparePrefix = (prefix: Expression, expr: Expression): boolean => {\n    if (prefix.type !== expr.type) {\n        return false;\n    }\n    switch (prefix.type) {\n        case \"literal\":\n        case \"nonterminal\":\n            return prefix.value === expr.value;\n        case \"group\":\n        case \"optional\":\n        case \"many\":\n        case \"many1\":\n            return comparePrefix(prefix.value, expr.value as Expression);\n        case \"minus\":\n        case \"skip\":\n        case \"next\":\n            return (\n                comparePrefix(prefix.value[0], expr.value[0]) &&\n                comparePrefix(prefix.value[1], expr.value[1])\n            );\n        case \"concatenation\":\n            return prefix.value.every((e, i) => comparePrefix(e, expr.value[i]));\n        case \"alternation\":\n            return prefix.value.some((e, i) => comparePrefix(e, expr.value[i]));\n        case \"epsilon\":\n            return true;\n    }\n};\n\nexport function rewriteTreeLeftRecursion(name: string, expr: Alteration) {\n    const prefixMap = new Map<Expression, Expression[]>();\n    let commonPrefix: Expression | null = null;\n\n    for (let i = 0; i < expr.value.length - 1; i++) {\n        const e1 = expr.value[i];\n        const e2 = expr.value[i + 1];\n\n        const common = findCommonPrefix(e1, e2);\n        if (common) {\n            const [prefix, te1, te2] = common;\n\n            if (commonPrefix !== null && comparePrefix(prefix, commonPrefix)) {\n                prefixMap.get(commonPrefix)!.push(te2);\n            } else {\n                prefixMap.set(prefix, [te1, te2]);\n                commonPrefix = prefix;\n            }\n            if (i === expr.value.length - 2) {\n                expr.value.shift();\n            }\n            expr.value.shift();\n            i -= 1;\n        }\n    }\n\n    for (const [prefix, expressions] of prefixMap) {\n        const alternation = {\n            type: \"alternation\",\n            value: expressions,\n        } as Alteration;\n        const newExpr = {\n            type: \"concatenation\",\n            value: [\n                {\n                    type: \"group\",\n                    value: alternation,\n                },\n                {\n                    type: \"group\",\n                    value: prefix,\n                },\n            ],\n        } as Concatenation;\n\n        expr.value.push(newExpr);\n    }\n}\n\nconst removeDirectLeftRecursionProduction = (\n    name: string,\n    expr: Alteration,\n    tailName: string\n) => {\n    const head = [];\n    const tail = [];\n\n    const APrime = {\n        type: \"nonterminal\",\n        value: tailName,\n    } as Nonterminal;\n\n    for (let i = 0; i < expr.value.length; i++) {\n        const e = expr.value[i];\n\n        if (e.type === \"concatenation\" && e.value[0].value === name) {\n            tail.push({\n                type: \"concatenation\",\n                value: [...e.value.slice(1), APrime],\n            });\n        } else {\n            head.push({\n                type: \"concatenation\",\n                value: [e, APrime],\n            });\n        }\n    }\n\n    if (tail.length === 0) {\n        return [undefined, undefined];\n    }\n\n    tail.push({\n        type: \"epsilon\",\n    } as Epsilon);\n\n    return [\n        {\n            type: \"alternation\",\n            value: head,\n        } as Alteration,\n        {\n            type: \"alternation\",\n            value: tail,\n        } as Alteration,\n    ] as const;\n};\n\nexport function removeDirectLeftRecursion(ast: AST) {\n    const newNodes = new Map() as AST;\n\n    let uniqueIndex = 0;\n    for (const [name, productionRule] of ast) {\n        const { expression } = productionRule;\n\n        if (expression.type === \"alternation\") {\n            const tailName = `${name}_${uniqueIndex++}`;\n\n            const [head, tail] = removeDirectLeftRecursionProduction(\n                name,\n                expression,\n                tailName\n            );\n\n            if (head) {\n                newNodes.set(tailName, {\n                    name: tailName,\n                    expression: tail,\n                } as ProductionRule);\n                newNodes.set(name, {\n                    name,\n                    expression: head,\n                    comment: productionRule.comment,\n                } as ProductionRule);\n            }\n        }\n    }\n\n    if (newNodes.size === 0) {\n        return ast;\n    }\n    for (const [name, productionRule] of newNodes) {\n        ast.set(name, productionRule);\n    }\n\n    for (const [name, productionRule] of ast) {\n        const { expression } = productionRule;\n        if (expression.type === \"alternation\") {\n            rewriteTreeLeftRecursion(name, expression);\n        }\n    }\n}\n\nexport function removeIndirectLeftRecursion(ast: AST) {\n    let i = 0;\n\n    let uniqueIndex = 0;\n    const betas = new Map<string, Expression>();\n\n    const recurse = (name: string, expr: Expression) => {\n        if (expr.type === \"concatenation\") {\n            if (expr.value[0].type === \"nonterminal\" && expr.value[0].value === name) {\n                const beta = {\n                    type: \"concatenation\",\n                    value: expr.value.slice(1, expr.value.length),\n                } as Concatenation;\n                const aj = expr.value.shift();\n                const tailName = `${name}_${uniqueIndex++}`;\n            }\n        }\n    };\n\n    for (const [name, expression] of ast) {\n        recurse(name, expression);\n\n        i += 1;\n    }\n}\n\nexport function removeAllLeftRecursion(ast: AST) {\n    const newAST = topologicalSort(ast);\n\n    // removeIndirectLeftRecursion(newAST);\n    removeDirectLeftRecursion(newAST);\n\n    return newAST;\n}\n","import { Parser, all, any, eof, regex, string } from \"../parse\";\nimport { Expression, Nonterminals, AST, EBNFGrammar, ProductionRule } from \"./grammar\";\nimport { removeAllLeftRecursion } from \"./optimize\";\n\nexport function generateASTFromEBNF(input: string) {\n    const parser = new EBNFGrammar().grammar();\n    const parsed = parser.parse(input);\n\n    if (!parsed) {\n        throw new Error(\"Failed to parse EBNF grammar\");\n    }\n\n    return parsed.reduce((acc, productionRule, ix) => {\n        return acc.set(productionRule.name, productionRule);\n    }, new Map<string, ProductionRule>()) as AST;\n}\n\nexport function generateParserFromAST(ast: AST) {\n    function generateParser(name: string, expr: Expression): Parser<any> {\n        switch (expr.type) {\n            case \"literal\":\n                return string(expr.value);\n            case \"nonterminal\":\n                const l = Parser.lazy(() => {\n                    return nonterminals[expr.value];\n                });\n                l.context.name = expr.value as any;\n                return l;\n\n            case \"epsilon\":\n                return eof().opt();\n\n            case \"group\":\n                return generateParser(name, expr.value);\n\n            case \"regex\":\n                return regex(expr.value);\n\n            case \"optionalWhitespace\":\n                return generateParser(name, expr.value).trim();\n\n            case \"optional\":\n                return generateParser(name, expr.value).opt();\n            case \"many\":\n                return generateParser(name, expr.value).many();\n            case \"many1\":\n                return generateParser(name, expr.value).many(1);\n            case \"skip\":\n                return generateParser(name, expr.value[0]).skip(\n                    generateParser(name, expr.value[1])\n                );\n            case \"next\":\n                return generateParser(name, expr.value[0]).next(\n                    generateParser(name, expr.value[1])\n                );\n            case \"minus\":\n                return generateParser(name, expr.value[0]).not(\n                    generateParser(name, expr.value[1])\n                );\n            case \"concatenation\": {\n                const parsers = expr.value.map((x) => generateParser(name, x));\n                if (parsers.at(-1)?.context?.name === \"eof\") {\n                    parsers.pop();\n                }\n                return all(...parsers);\n            }\n            case \"alternation\": {\n                return any(...expr.value.map((x) => generateParser(name, x)));\n            }\n        }\n    }\n\n    const nonterminals: Nonterminals = {};\n\n    for (const [name, productionRule] of ast.entries()) {\n        nonterminals[name] = generateParser(name, productionRule.expression);\n    }\n    return nonterminals;\n}\n\nexport function generateParserFromEBNF(input: string, optimizeGraph: boolean = false) {\n    let ast = generateASTFromEBNF(input);\n\n    if (optimizeGraph) {\n        ast = removeAllLeftRecursion(ast);\n    }\n    const nonterminals = generateParserFromAST(ast);\n    return [nonterminals, ast] as const;\n}\n"],"names":["operatorToType","reduceBinaryExpression","left","rightExpression","acc","op","right","mapFactor","term","defaultOptions","EBNFGrammar","options","__publicField","regex","any","string","value","expression","all","name","above","rule","below","__decorateClass","lazy","topologicalSort","ast","visited","order","visit","node","stack","productionRule","expr","child","newAST","findCommonPrefix","e1","e2","common","commons","_","i","x","prefixes","e1s","e2s","startIx","e","comparePrefix","prefix","rewriteTreeLeftRecursion","prefixMap","commonPrefix","te1","te2","expressions","newExpr","removeDirectLeftRecursionProduction","tailName","head","tail","APrime","removeDirectLeftRecursion","newNodes","uniqueIndex","removeIndirectLeftRecursion","recurse","removeAllLeftRecursion","generateASTFromEBNF","input","parsed","ix","generateParserFromAST","generateParser","Parser","nonterminals","eof","parsers","_b","_a","generateParserFromEBNF","optimizeGraph"],"mappings":"udA+DA,MAAMA,EAAiB,CACnB,IAAK,cACL,IAAK,gBACL,IAAK,QACL,KAAM,OACN,KAAM,OACN,IAAK,OACL,IAAK,QACL,IAAK,WACL,KAAM,oBACV,EAEMC,EAAyB,CAAC,CAACC,EAAMC,CAAe,IAC9CA,EAAgB,SAAW,EACpBD,EAEJC,EAAgB,OAAO,CAACC,EAAK,CAACC,EAAIC,CAAK,KACnC,CACH,KAAMN,EAAeK,CAAE,EACvB,MAAO,CAACD,EAAKE,CAAK,CAAA,GAEvBJ,CAAI,EAGLK,EAAY,CAAC,CAACC,EAAMH,CAAE,IACpBA,IAAO,OACAG,EAGJ,CACH,KAFSR,EAAeK,CAAE,EAG1B,MAAOG,CAAA,EASTC,EAAiB,CACnB,MAAO,GACP,SAAU,EACd,EAEO,MAAMC,CAAY,CAGrB,YAAYC,EAA4B,CAFxCC,EAAA,gBAGI,KAAK,QAAU,CACX,GAAGH,EACH,GAAIE,GAAW,CAAC,CAAA,CAExB,CAEA,YAAa,CACF,OAAAE,QAAM,wBAAwB,EAAE,MAC3C,CAEA,SAAU,CACN,OAAO,KAAK,eACRC,EAAA,IACID,QAAM,OAAO,EAAE,KAAKE,EAAAA,OAAO,GAAG,EAAGA,EAAAA,OAAO,GAAG,CAAC,EAC5CF,QAAM,OAAO,EAAE,KAAKE,EAAAA,OAAO,GAAG,EAAGA,EAAAA,OAAO,GAAG,CAAC,CAAA,EAC9C,IAAKC,IACI,CACH,KAAM,UACN,MAAAA,CAAA,EAEP,CAAA,CAET,CAEA,SAAU,CACN,OAAOF,MAAIC,EAAAA,OAAO,SAAS,EAAGA,EAAO,OAAA,GAAG,CAAC,EACpC,KAAK,EACL,IAAKC,IACK,CACH,KAAM,UACN,MAAO,MAAA,EAEd,CACT,CAEA,aAAc,CACV,OAAO,KAAK,WAAA,EAAa,IAAKA,IACnB,CACH,KAAM,cACN,MAAAA,CAAA,EAEP,CACL,CAGA,YAAa,CACF,OAAAH,QAAM,gBAAgB,EAAE,MACnC,CAGA,SAAU,CACC,OAAAA,EAAA,MAAM,QAAQ,EAChB,GAAG,KAAK,WAAY,CAAA,EACpB,MACT,CAEA,eAAe,EAAgB,CAC3B,OAAO,EACF,KAAK,KAAK,WAAA,EAAa,KAAK,EAAG,EAAK,EACpC,IAAI,CAAC,CAACX,EAAMe,EAAYX,CAAK,KAC1BW,EAAW,QAAU,CACjB,KAAAf,EACA,MAAAI,CAAA,EAEGW,EACV,CACT,CAGA,OAAQ,CACJ,OAAO,KAAK,IAAA,EACP,OACA,KAAKF,EAAA,OAAO,GAAG,EAAGA,SAAO,GAAG,CAAC,EAC7B,IAAKC,IACK,CACH,KAAM,QACN,MAAAA,CAAA,EAEP,CACT,CAGA,OAAQ,CACJ,OAAOH,QAAM,QAAQ,EAChB,KAAKE,EAAAA,OAAO,GAAG,EAAGA,EAAAA,OAAO,GAAG,CAAC,EAC7B,IAAKC,IACK,CACH,KAAM,QACN,MAAO,IAAI,OAAOA,CAAK,CAAA,EAE9B,CACT,CAGA,eAAgB,CACZ,OAAO,KAAK,IAAA,EACP,OACA,KAAKD,EAAA,OAAO,GAAG,EAAGA,SAAO,GAAG,CAAC,EAC7B,IAAKC,IACK,CACH,KAAM,WACN,MAAAA,CAAA,EAEP,CACT,CAGA,WAAY,CACR,OAAO,KAAK,IAAA,EACP,OACA,KAAKD,EAAA,OAAO,GAAG,EAAGA,SAAO,GAAG,CAAC,EAC7B,IAAKC,IACK,CACH,KAAM,OACN,MAAAA,CAAA,EAEP,CACT,CAGA,KAAM,CACF,OAAO,KAAK,YAChB,CAGA,MAAO,CACI,OAAAF,EAAA,IACH,KAAK,QAAQ,EACb,KAAK,MAAM,EACX,KAAK,cAAc,EACnB,KAAK,UAAU,EACf,KAAK,YAAY,EACjB,KAAK,QAAQ,EACb,KAAK,MAAM,CAAA,CAEnB,CAGA,QAAS,CACL,OAAO,KAAK,eACRI,EAAA,IACI,KAAK,KAAK,EACVJ,EAAA,IACIC,SAAO,IAAI,EAAE,KAAK,EAClBA,SAAO,GAAG,EAAE,KAAK,EACjBA,SAAO,GAAG,EAAE,KAAK,EACjBA,SAAO,GAAG,EAAE,KAAK,GACnB,IAAI,CAAA,EACR,IAAIR,CAAS,CAAA,CAEvB,CAGA,cAAe,CACJ,OAAAW,EAAA,IACH,KAAK,OAAO,EACZA,EAAA,IACIJ,EAAAA,IAAIC,EAAAA,OAAO,IAAI,EAAE,KAAQ,EAAAA,EAAA,OAAO,IAAI,EAAE,OAAQA,EAAAA,OAAO,GAAG,EAAE,MAAM,EAChE,KAAK,OAAO,GACd,KAAK,CAAA,EACT,IAAId,CAAsB,CAChC,CAGA,eAAgB,CACZ,OAAO,KAAK,eACP,MAAMc,EAAO,OAAA,GAAG,EAAE,KAAM,CAAA,EACxB,IAAKC,GACEA,EAAM,SAAW,EACVA,EAAM,CAAC,EAGX,CACH,KAAM,gBACN,MAAAA,CAAA,CAEP,CACT,CAGA,aAAc,CACV,OAAO,KAAK,gBACP,MAAMD,EAAO,OAAA,GAAG,EAAE,KAAM,CAAA,EACxB,IAAKC,GACEA,EAAM,SAAW,EACVA,EAAM,CAAC,EAGX,CACH,KAAM,cACN,MAAAA,CAAA,CAEP,CACT,CAGA,KAAM,CACF,OAAO,KAAK,aAChB,CAGA,gBAAiB,CACN,OAAAE,EAAA,IACH,KAAK,IAAI,EACTH,SAAO,GAAG,EAAE,KAAK,EACjB,KAAK,IAAI,EACTD,EAAA,IAAIC,SAAO,GAAG,EAAGA,SAAO,GAAG,CAAC,EAAE,KAAK,GACrC,IAAI,CAAC,CAACI,EAAM,CAAEF,CAAU,KACf,CAAE,KAAAE,EAAM,WAAAF,GAClB,CACL,CAGA,SAAU,CACN,OAAO,KAAK,eAAe,EACtB,KAAK,KAAK,UAAU,KAAQ,EAAA,EAAK,EACjC,IAAI,CAAC,CAACG,EAAOC,EAAMC,CAAK,KACrBD,EAAK,QAAU,CACX,MAAAD,EACA,MAAAE,CAAA,EAEGD,EACV,EACA,KAAK,CAAC,CACf,CACJ,CApLIE,EAAA,CADAC,EAAA,IAAA,EAhDSd,EAiDT,UAAA,aAAA,CAAA,EAKAa,EAAA,CADAC,EAAA,IAAA,EArDSd,EAsDT,UAAA,UAAA,CAAA,EAmBAa,EAAA,CADAC,EAAA,IAAA,EAxESd,EAyET,UAAA,QAAA,CAAA,EAaAa,EAAA,CADAC,EAAA,IAAA,EArFSd,EAsFT,UAAA,QAAA,CAAA,EAYAa,EAAA,CADAC,EAAA,IAAA,EAjGSd,EAkGT,UAAA,gBAAA,CAAA,EAaAa,EAAA,CADAC,EAAA,IAAA,EA9GSd,EA+GT,UAAA,YAAA,CAAA,EAaAa,EAAA,CADAC,EAAA,IAAA,EA3HSd,EA4HT,UAAA,MAAA,CAAA,EAKAa,EAAA,CADAC,EAAA,IAAA,EAhISd,EAiIT,UAAA,OAAA,CAAA,EAaAa,EAAA,CADAC,EAAA,IAAA,EA7ISd,EA8IT,UAAA,SAAA,CAAA,EAeAa,EAAA,CADAC,EAAA,IAAA,EA5JSd,EA6JT,UAAA,eAAA,CAAA,EAWAa,EAAA,CADAC,EAAA,IAAA,EAvKSd,EAwKT,UAAA,gBAAA,CAAA,EAgBAa,EAAA,CADAC,EAAA,IAAA,EAvLSd,EAwLT,UAAA,cAAA,CAAA,EAgBAa,EAAA,CADAC,EAAA,IAAA,EAvMSd,EAwMT,UAAA,MAAA,CAAA,EAKAa,EAAA,CADAC,EAAA,IAAA,EA5MSd,EA6MT,UAAA,iBAAA,CAAA,EAYAa,EAAA,CADAC,EAAA,IAAA,EAxNSd,EAyNT,UAAA,UAAA,CAAA,EC3TG,SAASe,EAAgBC,EAAU,CAChC,MAAAC,MAAc,IACdC,EAA0B,CAAA,EAEvB,SAAAC,EAAMC,EAAcC,EAAoB,CAC7C,GAAIA,EAAM,IAAID,CAAI,GAAKH,EAAQ,IAAIG,CAAI,EACnC,OAGJC,EAAM,IAAID,CAAI,EACR,MAAAE,EAAiBN,EAAI,IAAII,CAAI,EAEnC,GAAI,CAACE,EACD,OAGJ,MAAMC,EAAOD,EAAe,WAExB,GAAAC,EAAK,OAAS,cACRJ,EAAAI,EAAK,MAAOF,CAAK,UAChBE,EAAK,iBAAiB,MAClB,UAAAC,KAASD,EAAK,MACjBC,EAAM,OAAS,eACTL,EAAAK,EAAM,MAAOH,CAAK,EAKpCJ,EAAQ,IAAIG,CAAI,EAChBC,EAAM,OAAOD,CAAI,EAEjBF,EAAM,QAAQF,EAAI,IAAII,CAAI,CAAmB,CACjD,CAEW,SAAA,CAACX,CAAI,IAAKO,EACXG,EAAAV,EAAU,IAAA,GAAa,EAG3B,MAAAgB,MAAa,IACnB,UAAWd,KAAQO,EACRO,EAAA,IAAId,EAAK,KAAMA,CAAI,EAGvB,OAAAc,CACX,CAEa,MAAAC,EAAmB,CAC5BC,EACAC,IAC8C,CAC1C,GAAA,IAACD,GAAA,MAAAA,EAAI,OAAQ,EAACC,GAAA,MAAAA,EAAI,OAAQD,EAAG,OAASC,EAAG,MAI7C,OAAQD,EAAG,KAAM,CACb,IAAK,UACL,IAAK,cACG,OAAAA,EAAG,QAAUC,EAAG,MACT,OAEA,CAACD,EAAI,CAAE,KAAM,SAAa,EAAA,CAAE,KAAM,SAAA,CAAW,EAO5D,IAAK,QACL,IAAK,WACL,IAAK,qBACL,IAAK,OACL,IAAK,QAAS,CACV,MAAME,EAASH,EAAiBC,EAAG,MAAOC,EAAG,KAAmB,EAChE,OAAKC,EAGM,CACH,CACI,KAAMF,EAAG,KACT,MAAOE,EAAO,CAAC,CACnB,EACA,CACI,KAAMF,EAAG,KACT,MAAOE,EAAO,CAAC,CACnB,EACA,CACI,KAAMF,EAAG,KACT,MAAOE,EAAO,CAAC,CACnB,CAAA,EAdG,MAiBf,CAEA,IAAK,gBAAiB,CACZ,MAAAC,EAAUH,EAAG,MAAM,IAAI,CAACI,EAAGC,IAC7BN,EAAiBC,EAAG,MAAMK,CAAC,EAAGJ,EAAG,MAAMI,CAAC,CAAC,CAAA,EAE7C,GAAIF,EAAQ,KAAMG,GAAMA,IAAM,MAAS,EAC5B,OAGX,MAAMC,EAAWJ,EAAQ,IAAKG,GAAMA,EAAE,CAAC,CAAC,EAClCE,EAAML,EAAQ,IAAKG,GAAMA,EAAE,CAAC,CAAC,EAC7BG,EAAMN,EAAQ,IAAKG,GAAMA,EAAE,CAAC,CAAC,EAE7BI,EAAUH,EAAS,YAAY,IAAI,EACrC,OAAAG,IAAYH,EAAS,OAAS,EACvB,OAGJ,CACH,CACI,KAAM,gBACN,MAJOA,EAAS,MAAMG,EAAU,CAAC,CAKrC,EACA,CACI,KAAM,gBACN,MAAOF,CACX,EACA,CACI,KAAM,gBACN,MAAOC,CACX,CAAA,CAER,CAEA,IAAK,cAEU,UAAAE,KAAKX,EAAG,MAAO,CAChB,MAAAE,EAASH,EAAiBY,EAAGV,CAAE,EACrC,GAAIC,EACO,OAAAA,CAEf,CACW,UAAAS,KAAKV,EAAG,MAAuB,CAChC,MAAAC,EAASH,EAAiBC,EAAIW,CAAC,EACrC,GAAIT,EACO,OAAAA,CAEf,CACO,MACf,CAEJ,EAEaU,EAAgB,CAACC,EAAoBjB,IAA8B,CACxE,GAAAiB,EAAO,OAASjB,EAAK,KACd,MAAA,GAEX,OAAQiB,EAAO,KAAM,CACjB,IAAK,UACL,IAAK,cACM,OAAAA,EAAO,QAAUjB,EAAK,MACjC,IAAK,QACL,IAAK,WACL,IAAK,OACL,IAAK,QACD,OAAOgB,EAAcC,EAAO,MAAOjB,EAAK,KAAmB,EAC/D,IAAK,QACL,IAAK,OACL,IAAK,OACD,OACIgB,EAAcC,EAAO,MAAM,CAAC,EAAGjB,EAAK,MAAM,CAAC,CAAC,GAC5CgB,EAAcC,EAAO,MAAM,CAAC,EAAGjB,EAAK,MAAM,CAAC,CAAC,EAEpD,IAAK,gBACD,OAAOiB,EAAO,MAAM,MAAM,CAACF,EAAGN,IAAMO,EAAcD,EAAGf,EAAK,MAAMS,CAAC,CAAC,CAAC,EACvE,IAAK,cACD,OAAOQ,EAAO,MAAM,KAAK,CAACF,EAAGN,IAAMO,EAAcD,EAAGf,EAAK,MAAMS,CAAC,CAAC,CAAC,EACtE,IAAK,UACM,MAAA,EACf,CACJ,EAEgB,SAAAS,EAAyBhC,EAAcc,EAAkB,CAC/D,MAAAmB,MAAgB,IACtB,IAAIC,EAAkC,KAEtC,QAASX,EAAI,EAAGA,EAAIT,EAAK,MAAM,OAAS,EAAGS,IAAK,CACtC,MAAAL,EAAKJ,EAAK,MAAMS,CAAC,EACjBJ,EAAKL,EAAK,MAAMS,EAAI,CAAC,EAErBH,EAASH,EAAiBC,EAAIC,CAAE,EACtC,GAAIC,EAAQ,CACR,KAAM,CAACW,EAAQI,EAAKC,CAAG,EAAIhB,EAEvBc,IAAiB,MAAQJ,EAAcC,EAAQG,CAAY,EAC3DD,EAAU,IAAIC,CAAY,EAAG,KAAKE,CAAG,GAErCH,EAAU,IAAIF,EAAQ,CAACI,EAAKC,CAAG,CAAC,EACjBF,EAAAH,GAEfR,IAAMT,EAAK,MAAM,OAAS,GAC1BA,EAAK,MAAM,QAEfA,EAAK,MAAM,QACNS,GAAA,CACT,CACJ,CAEA,SAAW,CAACQ,EAAQM,CAAW,IAAKJ,EAAW,CAK3C,MAAMK,EAAU,CACZ,KAAM,gBACN,MAAO,CACH,CACI,KAAM,QACN,MATQ,CAChB,KAAM,cACN,MAAOD,CAAA,CAQH,EACA,CACI,KAAM,QACN,MAAON,CACX,CACJ,CAAA,EAGCjB,EAAA,MAAM,KAAKwB,CAAO,CAC3B,CACJ,CAEA,MAAMC,EAAsC,CACxCvC,EACAc,EACA0B,IACC,CACD,MAAMC,EAAO,CAAA,EACPC,EAAO,CAAA,EAEPC,EAAS,CACX,KAAM,cACN,MAAOH,CAAA,EAGX,QAASjB,EAAI,EAAGA,EAAIT,EAAK,MAAM,OAAQS,IAAK,CAClC,MAAAM,EAAIf,EAAK,MAAMS,CAAC,EAElBM,EAAE,OAAS,iBAAmBA,EAAE,MAAM,CAAC,EAAE,QAAU7B,EACnD0C,EAAK,KAAK,CACN,KAAM,gBACN,MAAO,CAAC,GAAGb,EAAE,MAAM,MAAM,CAAC,EAAGc,CAAM,CAAA,CACtC,EAEDF,EAAK,KAAK,CACN,KAAM,gBACN,MAAO,CAACZ,EAAGc,CAAM,CAAA,CACpB,CAET,CAEI,OAAAD,EAAK,SAAW,EACT,CAAC,OAAW,MAAS,GAGhCA,EAAK,KAAK,CACN,KAAM,SAAA,CACE,EAEL,CACH,CACI,KAAM,cACN,MAAOD,CACX,EACA,CACI,KAAM,cACN,MAAOC,CACX,CAAA,EAER,EAEO,SAASE,EAA0BrC,EAAU,CAC1C,MAAAsC,MAAe,IAErB,IAAIC,EAAc,EAClB,SAAW,CAAC9C,EAAMa,CAAc,IAAKN,EAAK,CAChC,KAAA,CAAE,WAAAT,CAAe,EAAAe,EAEnB,GAAAf,EAAW,OAAS,cAAe,CAC7B,MAAA0C,EAAW,GAAGxC,KAAQ8C,MAEtB,CAACL,EAAMC,CAAI,EAAIH,EACjBvC,EACAF,EACA0C,CAAA,EAGAC,IACAI,EAAS,IAAIL,EAAU,CACnB,KAAMA,EACN,WAAYE,CAAA,CACG,EACnBG,EAAS,IAAI7C,EAAM,CACf,KAAAA,EACA,WAAYyC,EACZ,QAAS5B,EAAe,OAAA,CACT,EAE3B,CACJ,CAEI,GAAAgC,EAAS,OAAS,EACX,OAAAtC,EAEX,SAAW,CAACP,EAAMa,CAAc,IAAKgC,EAC7BtC,EAAA,IAAIP,EAAMa,CAAc,EAGhC,SAAW,CAACb,EAAMa,CAAc,IAAKN,EAAK,CAChC,KAAA,CAAE,WAAAT,CAAe,EAAAe,EACnBf,EAAW,OAAS,eACpBkC,EAAyBhC,EAAMF,CAAU,CAEjD,CACJ,CAEO,SAASiD,EAA4BxC,EAAU,CAM5C,MAAAyC,EAAU,CAAChD,EAAcc,IAAqB,CAC5CA,EAAK,OAAS,iBACVA,EAAK,MAAM,CAAC,EAAE,OAAS,eAAiBA,EAAK,MAAM,CAAC,EAAE,QAAUd,IAGrDc,EAAK,MAAM,MAAM,EAAGA,EAAK,MAAM,MAAM,EAErCA,EAAK,MAAM,MAAM,EAGpC,EAGJ,SAAW,CAACd,EAAMF,CAAU,IAAKS,EAC7ByC,EAAQhD,EAAMF,CAAU,CAIhC,CAEO,SAASmD,EAAuB1C,EAAU,CACvC,MAAAS,EAASV,EAAgBC,CAAG,EAGlC,OAAAqC,EAA0B5B,CAAM,EAEzBA,CACX,CCpWO,SAASkC,EAAoBC,EAAe,CAEzC,MAAAC,EADS,IAAI7D,EAAY,EAAE,QAAQ,EACnB,MAAM4D,CAAK,EAEjC,GAAI,CAACC,EACK,MAAA,IAAI,MAAM,8BAA8B,EAGlD,OAAOA,EAAO,OAAO,CAACnE,EAAK4B,EAAgBwC,IAChCpE,EAAI,IAAI4B,EAAe,KAAMA,CAAc,EAC/C,IAAA,GAA6B,CACxC,CAEO,SAASyC,EAAsB/C,EAAU,CACnC,SAAAgD,EAAevD,EAAcc,EAA+B,SACjE,OAAQA,EAAK,KAAM,CACf,IAAK,UACM,OAAAlB,EAAA,OAAOkB,EAAK,KAAK,EAC5B,IAAK,cACK,MAAA,EAAI0C,SAAO,KAAK,IACXC,EAAa3C,EAAK,KAAK,CACjC,EACC,SAAA,QAAQ,KAAOA,EAAK,MACf,EAEX,IAAK,UACM,OAAA4C,EAAA,IAAA,EAAM,MAEjB,IAAK,QACM,OAAAH,EAAevD,EAAMc,EAAK,KAAK,EAE1C,IAAK,QACM,OAAApB,EAAA,MAAMoB,EAAK,KAAK,EAE3B,IAAK,qBACD,OAAOyC,EAAevD,EAAMc,EAAK,KAAK,EAAE,KAAK,EAEjD,IAAK,WACD,OAAOyC,EAAevD,EAAMc,EAAK,KAAK,EAAE,IAAI,EAChD,IAAK,OACD,OAAOyC,EAAevD,EAAMc,EAAK,KAAK,EAAE,KAAK,EACjD,IAAK,QACD,OAAOyC,EAAevD,EAAMc,EAAK,KAAK,EAAE,KAAK,CAAC,EAClD,IAAK,OACD,OAAOyC,EAAevD,EAAMc,EAAK,MAAM,CAAC,CAAC,EAAE,KACvCyC,EAAevD,EAAMc,EAAK,MAAM,CAAC,CAAC,CAAA,EAE1C,IAAK,OACD,OAAOyC,EAAevD,EAAMc,EAAK,MAAM,CAAC,CAAC,EAAE,KACvCyC,EAAevD,EAAMc,EAAK,MAAM,CAAC,CAAC,CAAA,EAE1C,IAAK,QACD,OAAOyC,EAAevD,EAAMc,EAAK,MAAM,CAAC,CAAC,EAAE,IACvCyC,EAAevD,EAAMc,EAAK,MAAM,CAAC,CAAC,CAAA,EAE1C,IAAK,gBAAiB,CACZ,MAAA6C,EAAU7C,EAAK,MAAM,IAAKU,GAAM+B,EAAevD,EAAMwB,CAAC,CAAC,EAC7D,QAAIoC,GAAAC,EAAAF,EAAQ,GAAG,EAAE,IAAb,YAAAE,EAAgB,UAAhB,YAAAD,EAAyB,QAAS,OAClCD,EAAQ,IAAI,EAET5D,EAAA,IAAI,GAAG4D,CAAO,CACzB,CACA,IAAK,cACM,OAAAhE,MAAI,GAAGmB,EAAK,MAAM,IAAKU,GAAM+B,EAAevD,EAAMwB,CAAC,CAAC,CAAC,CAEpE,CACJ,CAEA,MAAMiC,EAA6B,CAAA,EAEnC,SAAW,CAACzD,EAAMa,CAAc,IAAKN,EAAI,UACrCkD,EAAazD,CAAI,EAAIuD,EAAevD,EAAMa,EAAe,UAAU,EAEhE,OAAA4C,CACX,CAEgB,SAAAK,EAAuBX,EAAeY,EAAyB,GAAO,CAC9E,IAAAxD,EAAM2C,EAAoBC,CAAK,EAEnC,OAAIY,IACAxD,EAAM0C,EAAuB1C,CAAG,GAG7B,CADc+C,EAAsB/C,CAAG,EACxBA,CAAG,CAC7B"}