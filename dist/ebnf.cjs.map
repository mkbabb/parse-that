{"version":3,"file":"ebnf.cjs","sources":["../src/ebnf/grammar.ts","../src/ebnf/optimize.ts","../src/ebnf/generate.ts","../src/ebnf/transform.ts"],"sourcesContent":["import { Parser, string, lazy, all, any, regex } from \"../parse\";\n\nexport type Expression =\n    | Literal\n    | Comment\n    | Nonterminal\n    | Group\n    | Regex\n    | Optional\n    | Minus\n    | Many\n    | Many1\n    | Skip\n    | Next\n    | Concatenation\n    | Alteration\n    | Epsilon\n    | OptionalWhitespace\n    | Coalesce\n    | EOF;\n\nexport interface Literal {\n    type: \"literal\";\n    value: string;\n}\n\nexport interface Comment {\n    type: \"comment\";\n    value: string;\n}\n\nexport interface Nonterminal {\n    type: \"nonterminal\";\n    value: string;\n}\n\nexport interface Epsilon {\n    type: \"epsilon\";\n    value: undefined;\n}\n\nexport interface EOF {\n    type: \"eof\";\n    value: undefined;\n}\n\nexport interface OptionalWhitespace {\n    type: \"optionalWhitespace\";\n    value: undefined;\n}\n\nexport interface Coalesce {\n    type: \"coalesce\";\n    value: Expression[];\n}\n\nexport interface Group {\n    type: \"group\";\n    value: Expression;\n}\n\nexport interface Regex {\n    type: \"regex\";\n    value: RegExp;\n}\n\nexport interface Optional {\n    type: \"optional\";\n    value: Expression;\n}\n\nexport interface Minus {\n    type: \"minus\";\n    value: [Expression, Expression];\n}\n\nexport interface Many {\n    type: \"many\";\n    value: Expression;\n}\n\nexport interface Many1 {\n    type: \"many1\";\n    value: Expression;\n}\n\nexport interface Skip {\n    type: \"skip\";\n    value: [Expression, Expression];\n}\n\nexport interface Next {\n    type: \"next\";\n    value: [Expression, Expression];\n}\n\nexport interface Concatenation {\n    type: \"concatenation\";\n    value: Expression[];\n}\n\nexport interface Alteration {\n    type: \"alternation\";\n    value: Expression[];\n}\n\nexport type ProductionRule = {\n    type: \"productionRule\" | \"comment\";\n    expression: Expression;\n    name?: string;\n};\n\nexport type AST = Map<string, Expression>;\nexport type Nonterminals = { [key: string]: Parser<any> };\n\nconst comma = string(\",\").trim();\nconst equalSign = string(\"=\").trim();\n\nconst semicolon = string(\";\").trim();\nconst dot = string(\".\").trim();\nconst questionMark = string(\"?\").trim();\nconst optionalWhitespace = string(\"?w\").trim();\nconst coalsece = string(\"??\").trim();\nconst pipe = string(\"|\").trim();\n\nconst plus = string(\"+\").trim();\nconst minus = string(\"-\").trim();\nconst mul = string(\"*\").trim();\nconst div = string(\"/\").trim();\n\nconst leftShift = string(\">>\").trim();\nconst rightShift = string(\"<<\").trim();\n\nconst terminator = any(semicolon, dot);\n\nexport class EBNFGrammar {\n    identifier() {\n        return regex(/[_a-zA-Z][_a-zA-Z0-9]*/).trim();\n    }\n\n    literal() {\n        return any(\n            regex(/[^\"]+/).wrap(string('\"'), string('\"')),\n            regex(/[^']+/).wrap(string(\"'\"), string(\"'\"))\n        ).map((value) => {\n            return {\n                type: \"literal\",\n                value,\n            } as Literal;\n        });\n    }\n\n    epsilon() {\n        return any(string(\"epsilon\"), string(\"ε\"), string(\"ϵ\"))\n            .trim()\n            .map((value) => {\n                return {\n                    type: \"epsilon\",\n                    value: undefined,\n                } as Epsilon;\n            });\n    }\n\n    nonterminal() {\n        return this.identifier().map((value) => {\n            return {\n                type: \"nonterminal\",\n                value,\n            } as Nonterminal;\n        });\n    }\n\n    @lazy\n    group() {\n        return this.expression()\n            .trim()\n            .wrap(string(\"(\"), string(\")\"))\n            .map((value) => {\n                return {\n                    type: \"group\",\n                    value,\n                } as Group;\n            });\n    }\n\n    eof() {\n        return string(\"$\")\n            .trim()\n            .map((value) => {\n                return {\n                    type: \"eof\",\n                    value,\n                } as EOF;\n            });\n    }\n\n    @lazy\n    regex() {\n        return regex(/[^\\/]*/)\n            .wrap(string(\"/\"), string(\"/\"))\n            .map((value) => {\n                return {\n                    type: \"regex\",\n                    value: new RegExp(value),\n                } as Regex;\n            });\n    }\n\n    optional() {\n        return this.term()\n            .skip(questionMark)\n            .map((value) => {\n                return {\n                    type: \"optional\",\n                    value,\n                } as Optional;\n            });\n    }\n\n    @lazy\n    optionalGroup() {\n        return this.expression()\n            .trim()\n            .wrap(string(\"[\"), string(\"]\"))\n            .map((value) => {\n                return {\n                    type: \"optional\",\n                    value,\n                } as Optional;\n            });\n    }\n\n    optionalWhitespace() {\n        return this.term()\n            .skip(optionalWhitespace)\n            .map((value) => {\n                return {\n                    type: \"optionalWhitespace\",\n                    value,\n                } as OptionalWhitespace;\n            });\n    }\n\n    @lazy\n    coalesce() {\n        return all(this.term().skip(coalsece), this.factor()).map(([left, right]) => {\n            return {\n                type: \"coalesce\",\n                value: [left, right],\n            } as Coalesce;\n        });\n    }\n\n    subtraction() {\n        return all(this.term().skip(minus), this.term()).map(([left, right]) => {\n            return {\n                type: \"minus\",\n                value: [left, right],\n            } as Minus;\n        });\n    }\n\n    @lazy\n    manyGroup() {\n        return this.expression()\n            .trim()\n            .wrap(string(\"{\"), string(\"}\"))\n            .map((value) => {\n                return {\n                    type: \"many\",\n                    value,\n                } as Many;\n            });\n    }\n\n    many() {\n        return this.term()\n            .skip(mul)\n            .map((value) => {\n                return {\n                    type: \"many\",\n                    value,\n                } as Many;\n            });\n    }\n\n    many1() {\n        return this.term()\n            .skip(plus)\n            .map((value) => {\n                return {\n                    type: \"many1\",\n                    value,\n                } as Many1;\n            });\n    }\n\n    @lazy\n    next() {\n        return all(this.factor().skip(leftShift), any(this.skip(), this.factor())).map(\n            ([left, right]) => {\n                return {\n                    type: \"next\",\n                    value: [left, right],\n                } as Next;\n            }\n        );\n    }\n\n    @lazy\n    skip() {\n        return all(any(this.next(), this.factor()).skip(rightShift), this.factor()).map(\n            ([left, right]) => {\n                return {\n                    type: \"skip\",\n                    value: [left, right],\n                } as Skip;\n            }\n        );\n    }\n\n    concatenation() {\n        return any(this.skip(), this.next(), this.factor())\n            .sepBy(comma, 1)\n            .map((value) => {\n                return {\n                    type: \"concatenation\",\n                    value,\n                } as Concatenation;\n            });\n    }\n\n    alternation() {\n        return any(this.concatenation(), this.skip(), this.next(), this.factor())\n            .sepBy(pipe, 1)\n            .map((value) => {\n                return {\n                    type: \"alternation\",\n                    value,\n                } as Alteration;\n            });\n    }\n\n    bigComment() {\n        return regex(/\\/\\*[^]*?\\*\\//)\n            .trim()\n            .map((value) => {\n                return {\n                    type: \"comment\",\n                    expression: {\n                        type: \"literal\",\n                        value,\n                    } as Literal,\n                } as ProductionRule;\n            });\n    }\n\n    term() {\n        return any(\n            this.epsilon(),\n            this.literal(),\n            this.nonterminal(),\n            this.regex(),\n            this.group(),\n            this.optionalGroup(),\n            this.manyGroup(),\n            this.eof()\n        )\n            .then(this.bigComment().opt())\n            .map(([left, comment]) => {\n                if (comment) {\n                    left.comment = comment;\n                }\n                return left as unknown as Expression;\n            }) as Parser<Expression>;\n    }\n\n    factor() {\n        return any(\n            this.coalesce(),\n            this.optionalWhitespace(),\n            this.optional(),\n            this.many(),\n            this.many1(),\n            this.subtraction(),\n            this.term()\n        ) as Parser<Expression>;\n    }\n\n    comment() {\n        return regex(/\\/\\/.*/)\n            .trim()\n            .map((value) => {\n                return {\n                    type: \"comment\",\n                    expression: {\n                        type: \"literal\",\n                        value,\n                    } as Literal,\n                } as ProductionRule;\n            })\n            .or(this.bigComment()) as unknown as Parser<ProductionRule>;\n    }\n\n    expression() {\n        return any(\n            this.alternation(),\n            this.concatenation(),\n            this.skip(),\n            this.next(),\n            this.factor()\n        ) as Parser<Expression>;\n    }\n\n    productionRule() {\n        return all(\n            this.identifier().skip(equalSign),\n            this.expression().skip(terminator)\n        ).map(([name, expression]) => {\n            return { name, expression, type: \"productionRule\" } as ProductionRule;\n        });\n    }\n\n    grammar() {\n        return all(this.comment().many(), this.productionRule(), this.comment().many())\n            .map(([above, rule, below]) => {\n                rule.comment = {\n                    above,\n                    below,\n                };\n                return rule;\n            })\n            .many(1);\n    }\n}\n","import {\n    Alteration,\n    AST,\n    Concatenation,\n    Epsilon,\n    Expression,\n    Nonterminal,\n    ProductionRule,\n} from \"./grammar\";\n\nexport function topologicalSort(ast: AST) {\n    const visited = new Set<string>();\n    const order: ProductionRule[] = [];\n\n    function visit(node: string, stack: Set<string>) {\n        if (stack.has(node) || visited.has(node)) {\n            return;\n        }\n\n        stack.add(node);\n        const expr = ast.get(node)!;\n        if (!expr) {\n            return;\n        }\n\n        if (expr.type === \"nonterminal\") {\n            visit(expr.value, stack);\n        } else if (expr.type === \"concatenation\" || expr.type === \"alternation\") {\n            for (const child of expr.value) {\n                if (child.type === \"nonterminal\") {\n                    visit(child.value, stack);\n                }\n            }\n        }\n\n        visited.add(node);\n        stack.delete(node);\n        order.unshift({ name: node, expression: expr });\n    }\n\n    for (const [name] of ast) {\n        visit(name, new Set<string>());\n    }\n\n    const newAST = new Map<string, Expression>();\n    for (const rule of order) {\n        newAST.set(rule.name, rule.expression);\n    }\n\n    return newAST;\n}\n\nexport const findCommonPrefix = (\n    e1: Expression,\n    e2: Expression\n): [Expression | null, Expression, Expression] => {\n    if (!e1?.type || !e2?.type || e1.type !== e2.type) {\n        return undefined;\n    }\n\n    switch (e1.type) {\n        case \"literal\":\n        case \"nonterminal\": {\n            if (e1.value !== e2.value) {\n                return undefined;\n            } else {\n                return [e1, { type: \"epsilon\" }, { type: \"epsilon\" }] as [\n                    Expression,\n                    Expression,\n                    Expression\n                ];\n            }\n        }\n\n        case \"group\":\n        case \"optional\":\n        case \"many\":\n        case \"many1\": {\n            const common = findCommonPrefix(e1.value, e2.value as Expression);\n            if (!common) {\n                return undefined;\n            } else {\n                return [\n                    {\n                        type: e1.type,\n                        value: common[0],\n                    },\n                    {\n                        type: e1.type,\n                        value: common[1],\n                    },\n                    {\n                        type: e1.type,\n                        value: common[2],\n                    },\n                ] as [Expression, Expression, Expression];\n            }\n        }\n\n        case \"concatenation\": {\n            const commons = e1.value.map((_, i) =>\n                findCommonPrefix(e1.value[i], e2.value[i])\n            );\n            if (commons.some((x) => x === undefined)) {\n                return undefined;\n            }\n\n            const prefixes = commons.map((x) => x[0]);\n            const e1s = commons.map((x) => x[1]);\n            const e2s = commons.map((x) => x[2]);\n\n            const startIx = prefixes.lastIndexOf(null);\n            if (startIx === prefixes.length - 1) {\n                return undefined;\n            }\n\n            const prefix = prefixes.slice(startIx + 1);\n            return [\n                {\n                    type: \"concatenation\",\n                    value: prefix,\n                },\n                {\n                    type: \"concatenation\",\n                    value: e1s,\n                },\n                {\n                    type: \"concatenation\",\n                    value: e2s,\n                },\n            ];\n        }\n\n        case \"alternation\":\n            // TODO! This is not correct\n            for (const e of e1.value) {\n                const common = findCommonPrefix(e, e2);\n                if (common) {\n                    return common;\n                }\n            }\n            for (const e of e2.value as Expression[]) {\n                const common = findCommonPrefix(e1, e);\n                if (common) {\n                    return common;\n                }\n            }\n            return undefined;\n    }\n    return undefined;\n};\n\nexport const comparePrefix = (prefix: Expression, expr: Expression): boolean => {\n    if (prefix.type !== expr.type) {\n        return false;\n    }\n    switch (prefix.type) {\n        case \"literal\":\n        case \"nonterminal\":\n            return prefix.value === expr.value;\n        case \"group\":\n        case \"optional\":\n        case \"many\":\n        case \"many1\":\n            return comparePrefix(prefix.value, expr.value as Expression);\n        case \"minus\":\n        case \"skip\":\n        case \"next\":\n            return (\n                comparePrefix(prefix.value[0], expr.value[0]) &&\n                comparePrefix(prefix.value[1], expr.value[1])\n            );\n        case \"concatenation\":\n            return prefix.value.every((e, i) => comparePrefix(e, expr.value[i]));\n        case \"alternation\":\n            return prefix.value.some((e, i) => comparePrefix(e, expr.value[i]));\n        case \"epsilon\":\n            return true;\n    }\n};\n\nexport function rewriteTreeLeftRecursion(name: string, expr: Alteration) {\n    const prefixMap = new Map<Expression, Expression[]>();\n    let commonPrefix: Expression | null = null;\n\n    for (let i = 0; i < expr.value.length - 1; i++) {\n        const e1 = expr.value[i];\n        const e2 = expr.value[i + 1];\n\n        const common = findCommonPrefix(e1, e2);\n        if (common) {\n            const [prefix, te1, te2] = common;\n\n            if (commonPrefix !== null && comparePrefix(prefix, commonPrefix)) {\n                prefixMap.get(commonPrefix)!.push(te2);\n            } else {\n                prefixMap.set(prefix, [te1, te2]);\n                commonPrefix = prefix;\n            }\n            if (i === expr.value.length - 2) {\n                expr.value.shift();\n            }\n            expr.value.shift();\n            i -= 1;\n        }\n    }\n\n    for (const [prefix, expressions] of prefixMap) {\n        const alternation = {\n            type: \"alternation\",\n            value: expressions,\n        } as Alteration;\n        const newExpr = {\n            type: \"concatenation\",\n            value: [\n                {\n                    type: \"group\",\n                    value: alternation,\n                },\n                {\n                    type: \"group\",\n                    value: prefix,\n                },\n            ],\n        } as Concatenation;\n\n        expr.value.push(newExpr);\n    }\n}\n\nconst removeDirectLeftRecursionProduction = (\n    name: string,\n    expr: Alteration,\n    tailName: string\n) => {\n    const head = [];\n    const tail = [];\n\n    const APrime = {\n        type: \"nonterminal\",\n        value: tailName,\n    } as Nonterminal;\n\n    for (let i = 0; i < expr.value.length; i++) {\n        const e = expr.value[i];\n\n        if (e.type === \"concatenation\" && e.value[0].value === name) {\n            tail.push({\n                type: \"concatenation\",\n                value: [...e.value.slice(1), APrime],\n            });\n        } else {\n            head.push({\n                type: \"concatenation\",\n                value: [e, APrime],\n            });\n        }\n    }\n\n    // No direct left recursion\n    if (tail.length === 0) {\n        return [undefined, undefined];\n    }\n\n    tail.push({\n        type: \"epsilon\",\n    } as Epsilon);\n\n    return [\n        {\n            type: \"alternation\",\n            value: head,\n        } as Alteration,\n        {\n            type: \"alternation\",\n            value: tail,\n        } as Alteration,\n    ] as const;\n};\n\nexport function removeDirectLeftRecursion(ast: AST) {\n    const newNodes = new Map() as AST;\n\n    let uniqueIndex = 0;\n    for (const [name, expression] of ast) {\n        if (expression.type === \"alternation\") {\n            const tailName = `${name}_${uniqueIndex++}`;\n\n            const [head, tail] = removeDirectLeftRecursionProduction(\n                name,\n                expression,\n                tailName\n            );\n            if (head) {\n                newNodes.set(tailName, tail);\n                newNodes.set(name, head);\n            }\n        }\n    }\n\n    if (newNodes.size === 0) {\n        return ast;\n    }\n    for (const [name, expression] of newNodes) {\n        ast.set(name, expression);\n    }\n\n    for (const [name, expression] of ast) {\n        if (expression.type === \"alternation\") {\n            rewriteTreeLeftRecursion(name, expression);\n        }\n    }\n}\n\nexport function removeIndirectLeftRecursion(ast: AST) {\n    let i = 0;\n\n    let uniqueIndex = 0;\n    const betas = new Map<string, Expression>();\n\n    const recurse = (name: string, expr: Expression) => {\n        if (expr.type === \"concatenation\") {\n            if (expr.value[0].type === \"nonterminal\" && expr.value[0].value === name) {\n                const beta = {\n                    type: \"concatenation\",\n                    value: expr.value.slice(1, expr.value.length),\n                } as Concatenation;\n                const aj = expr.value.shift();\n                const tailName = `${name}_${uniqueIndex++}`;\n            }\n        }\n    };\n\n    for (const [name, expression] of ast) {\n        recurse(name, expression);\n\n        i += 1;\n    }\n}\n\nexport function removeAllLeftRecursion(ast: AST) {\n    const newAST = topologicalSort(ast);\n\n    // removeIndirectLeftRecursion(newAST);\n    removeDirectLeftRecursion(newAST);\n\n    return newAST;\n}\n","import { Parser, all, any, eof, regex, string } from \"../parse\";\nimport { Expression, Nonterminals, AST, EBNFGrammar } from \"./grammar\";\nimport { removeAllLeftRecursion } from \"./optimize\";\n\nexport function generateASTFromEBNF(input: string) {\n    const parser = new EBNFGrammar().grammar().trim();\n    const parsed = parser.parse(input);\n\n    if (!parsed) {\n        throw new Error(\"Failed to parse EBNF grammar\");\n    }\n\n    return parsed.reduce((acc, { name, expression, type }, ix) => {\n        acc.set(name, expression);\n        return acc;\n    }, new Map<string, Expression>()) as AST;\n}\n\nexport function generateParserFromAST(ast: AST) {\n    function generateParser(name: string, expr: Expression): Parser<any> {\n        switch (expr.type) {\n            case \"literal\":\n                return string(expr.value);\n            case \"nonterminal\":\n                const l = Parser.lazy(() => {\n                    return nonterminals[expr.value];\n                });\n                l.context.name = expr.value as any;\n                return l;\n\n            case \"comment\":\n            case \"epsilon\":\n                return eof().opt();\n\n            case \"eof\":\n                return eof();\n\n            case \"group\":\n                return generateParser(name, expr.value);\n\n            case \"regex\":\n                return regex(expr.value);\n\n            case \"optionalWhitespace\":\n                return generateParser(name, expr.value).trim();\n\n            case \"coalesce\":\n                return any(...expr.value.map((x) => generateParser(name, x)));\n\n            case \"optional\":\n                return generateParser(name, expr.value).opt();\n            case \"many\":\n                return generateParser(name, expr.value).many();\n            case \"many1\":\n                return generateParser(name, expr.value).many(1);\n            case \"skip\":\n                return generateParser(name, expr.value[0]).skip(\n                    generateParser(name, expr.value[1])\n                );\n            case \"next\":\n                return generateParser(name, expr.value[0]).next(\n                    generateParser(name, expr.value[1])\n                );\n            case \"minus\":\n                return generateParser(name, expr.value[0]).not(\n                    generateParser(name, expr.value[1])\n                );\n            case \"concatenation\": {\n                const parsers = expr.value.map((x) => generateParser(name, x));\n                if (parsers.at(-1)?.context?.name === \"eof\") {\n                    parsers.pop();\n                }\n                return all(...parsers);\n            }\n            case \"alternation\": {\n                return any(...expr.value.map((x) => generateParser(name, x)));\n            }\n        }\n    }\n\n    const nonterminals: Nonterminals = {};\n\n    for (const [name, expression] of ast.entries()) {\n        nonterminals[name] = generateParser(name, expression);\n    }\n    return nonterminals;\n}\n\nexport function generateParserFromEBNF(input: string, optimizeGraph: boolean = false) {\n    let ast = generateASTFromEBNF(input);\n\n    if (optimizeGraph) {\n        ast = removeAllLeftRecursion(ast);\n    }\n    const nonterminals = generateParserFromAST(ast);\n    return [nonterminals, ast] as const;\n}\n\nexport const addNonterminalsDebugging = (\n    nonterminals: Nonterminals,\n    logger: (...args: any[]) => void\n) => {\n    Object.entries(nonterminals).forEach(([k, v]) => {\n        nonterminals[k] = v.debug(k, false, logger);\n    });\n};\n","import { Expression, AST } from \"./grammar\";\n\nimport { generateParserFromEBNF } from \"./generate\";\n\nfunction breakLineOnSeparator(input: string, separator: string): string {\n    const lines = input.split(separator);\n\n    if (lines.length === 1) {\n        return input;\n    }\n\n    input = lines\n        .map((line, i) => {\n            if (i === lines.length - 1) {\n                return separator + line;\n            } else if (i === 0) {\n                return line;\n            }\n\n            const groups = line.split(\",\");\n\n            if (groups.length > 1) {\n                return `\\n\\t${separator} ` + line;\n            } else {\n                return separator + line;\n            }\n        })\n        .join(\"\");\n\n    const maxLineLength = 66;\n\n    if (input.length > maxLineLength) {\n        let di = maxLineLength;\n\n        for (let i = 0; i < input.length; i += di) {\n            const nearestSepIx = i === 0 ? maxLineLength : i + di;\n            const nearestSep = input.indexOf(separator, nearestSepIx);\n\n            if (nearestSep === -1) {\n                break;\n            }\n            input =\n                input.slice(0, nearestSep) +\n                `\\n\\t${separator}` +\n                input.slice(nearestSep + 1);\n        }\n    }\n\n    return input;\n}\n\nconst nonterminalsToTrim = [\n    \"symbol\",\n    \"identifier\",\n    \"terminal\",\n    \"pipe\",\n    \"comma\",\n    \"plus\",\n    \"minus\",\n    \"star\",\n    \"div\",\n    \"question\",\n    \"eof\",\n    \"optional_whitespace\",\n    \"regex\",\n    \"rhs\",\n    \"rule\",\n    \"grammar\",\n];\n\nexport const EBNFParser = (grammar: string) => {\n    const [nonterminals, ast] = generateParserFromEBNF(grammar);\n\n    for (const name of nonterminalsToTrim) {\n        nonterminals[name] = nonterminals[name].trim();\n    }\n\n    nonterminals.symbol = nonterminals.symbol;\n\n    nonterminals.identifier = nonterminals.identifier.map((v) => {\n        return v.flat().join(\"\");\n    });\n\n    nonterminals.terminal = nonterminals.terminal.map((v) => {\n        return v.flat().join(\"\");\n    });\n\n    nonterminals.regex = nonterminals.regex.map((v) => {\n        const s = v.flat().join(\"\");\n        return s;\n    });\n\n    nonterminals.rhs = nonterminals.rhs.map((v) => {\n        const a = v instanceof Array ? v.flat(Infinity) : v;\n        const s = a.join(\" \");\n        return breakLineOnSeparator(s, \"|\");\n    });\n\n    nonterminals.rule = nonterminals.rule.map((v) => {\n        const s = v.flat().join(\" \");\n        return s;\n    });\n\n    return nonterminals.grammar.map((rules) => {\n        let lastIx = 0;\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i];\n\n            if (rule.length > 80) {\n                rules[i] = rule + \"\\n\";\n                if (i > 0 && lastIx !== i - 1) {\n                    rules[i - 1] = rules[i - 1] + \"\\n\";\n                }\n                lastIx = i;\n            } else if (i - lastIx > 2) {\n                rules[i] = rule + \"\\n\";\n                lastIx = i;\n            }\n        }\n        return rules.join(\"\\n\");\n    });\n\n    // debugging(nonterminals);\n};\n\nfunction escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\ntype TextMateProductionRule = {\n    name: string;\n    match: string;\n};\n\ntype TextMateLanguage = {\n    name: string;\n    scopeName: string;\n    fileTypes: string[];\n    patterns: TextMateProductionRule[];\n};\n\nfunction transformEBNFASTToTextMateRegExp(expression: Expression): string {\n    switch (expression.type) {\n        case \"literal\":\n            return escapeRegExp(expression.value);\n        case \"nonterminal\":\n            return `($${expression.value})`;\n        case \"epsilon\":\n            return \"\";\n        case \"group\":\n            return `(${transformEBNFASTToTextMateRegExp(expression.value)})`;\n        case \"regex\":\n            return expression.value.source;\n        case \"optional\":\n            return `(${transformEBNFASTToTextMateRegExp(expression.value)})?`;\n        case \"minus\":\n            return `${transformEBNFASTToTextMateRegExp(\n                expression.value[0]\n            )}(?!${transformEBNFASTToTextMateRegExp(expression.value[1])})`;\n        case \"many\":\n            return `(${transformEBNFASTToTextMateRegExp(expression.value)})*`;\n        case \"many1\":\n            return `(${transformEBNFASTToTextMateRegExp(expression.value)})+`;\n        case \"skip\":\n            return `${transformEBNFASTToTextMateRegExp(\n                expression.value[0]\n            )}(?:${transformEBNFASTToTextMateRegExp(expression.value[1])})?`;\n        case \"next\":\n            return `${transformEBNFASTToTextMateRegExp(\n                expression.value[0]\n            )}(?=${transformEBNFASTToTextMateRegExp(expression.value[1])})`;\n        case \"concatenation\":\n            return expression.value.map(transformEBNFASTToTextMateRegExp).join(\"\");\n        case \"alternation\":\n            return expression.value\n                .map((expr) => `(${transformEBNFASTToTextMateRegExp(expr)})`)\n                .join(\"|\");\n    }\n}\n\nexport function transformEBNFASTToTextMateLanguage(ast: AST): TextMateLanguage {\n    const rules: TextMateProductionRule[] = [];\n\n    // Traverse the EBNF AST and transform each production rule into a TextMate production rule\n    for (const [name, expr] of ast) {\n        rules.push({\n            name,\n            match: transformEBNFASTToTextMateRegExp(expr),\n        });\n    }\n    // Create and return the TextMate language object\n    return {\n        name: \"EEBNF\",\n        scopeName: \"source.eebnf\",\n        fileTypes: [\"eebnf\"],\n        patterns: rules,\n    };\n}\n"],"names":["comma","string","equalSign","semicolon","dot","questionMark","optionalWhitespace","coalsece","pipe","plus","minus","mul","leftShift","rightShift","terminator","any","EBNFGrammar","regex","value","all","left","right","comment","name","expression","above","rule","below","__decorateClass","lazy","topologicalSort","ast","visited","order","visit","node","stack","expr","child","newAST","findCommonPrefix","e1","e2","common","commons","_","i","x","prefixes","e1s","e2s","startIx","e","comparePrefix","prefix","rewriteTreeLeftRecursion","prefixMap","commonPrefix","te1","te2","expressions","newExpr","removeDirectLeftRecursionProduction","tailName","head","tail","APrime","removeDirectLeftRecursion","newNodes","uniqueIndex","removeIndirectLeftRecursion","recurse","removeAllLeftRecursion","generateASTFromEBNF","input","parsed","acc","type","ix","generateParserFromAST","generateParser","l","Parser","nonterminals","eof","parsers","_b","_a","generateParserFromEBNF","optimizeGraph","addNonterminalsDebugging","logger","k","v","breakLineOnSeparator","separator","lines","line","maxLineLength","di","nearestSepIx","nearestSep","nonterminalsToTrim","EBNFParser","grammar","s","rules","lastIx","escapeRegExp","transformEBNFASTToTextMateRegExp","transformEBNFASTToTextMateLanguage"],"mappings":"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"}